{
  "name": "bq-formatter-vscode",
  "displayName": "BQ Formatter",
  "description": "VSCode Extension to format BigQuery SQL files",
  "version": "2.0.1",
  "publisher": "m-ahmadkhan",
  "author": {
    "name": "m-ahmadkhan"
  },
  "license": "MIT",
  "icon": "prettier-sql-clean.png",
  "engines": {
    "vscode": "^1.63.0"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/m-ahmadkhan/bq-formatter"
  },
  "bugs": {
    "url": "https://github.com/m-ahmadkhan/bq-formatter/issues"
  },
  "categories": [
    "Formatters",
    "Other"
  ],
  "keywords": [
    "bigquery",
    "db2",
    "hive",
    "formatter",
    "mariadb",
    "mssql",
    "mysql",
    "node",
    "n1ql",
    "plsql",
    "pl/sql",
    "postgres",
    "postgresql",
    "prettier",
    "redshift",
    "spark",
    "sparksql",
    "sql",
    "sql server",
    "tsql"
  ],
  "activationEvents": [
    "onStartupFinished",
    "onCommand:bq-formatter.format-selection"
  ],
  "main": "./out/extension.js",
  "scripts": {
    "clean": "rimraf out .vscode-test",
    "compile": "tsc --project ./tsconfig.json",
    "compile:types": "tsc --emitDeclarationOnly --project ./tsconfig.json",
    "watch": "tsc --watch --project ./",
    "build": "esbuild ./src/extension.ts --bundle --outfile=out/extension.js --external:vscode --format=cjs --platform=node",
    "build:prod": "yarn run build --minify && yarn run compile:types",
    "build:dev": "yarn run build --sourcemap && yarn run compile:types",
    "vscode:prepublish": "yarn run build:prod",
    "lint": "eslint src --ext ts",
    "pretest": "yarn run compile && yarn run lint",
    "test": "node ./out/test/runTest.js",
    "vsce": "vsce"
  },
  "dependencies": {
    "sql-formatter": "^8.0.0"
  },
  "devDependencies": {
    "@types/glob": "^7.1.4",
    "@types/mocha": "^9.0.0",
    "@types/node": "14.x",
    "@types/vscode": "^1.63.0",
    "@typescript-eslint/eslint-plugin": "^5.1.0",
    "@typescript-eslint/parser": "^5.1.0",
    "@vscode/test-electron": "^1.6.2",
    "esbuild": "^0.14.8",
    "eslint": "^8.1.0",
    "glob": "^7.1.7",
    "mocha": "^9.1.3",
    "typescript": "^4.4.4",
    "vsce": "^2.7.0"
  },
  "contributes": {
    "languages": [
      {
        "id": "sql",
        "aliases": [
          "SQL",
          "sql"
        ],
        "extensions": [
          ".sql",
          ".q"
        ]
      }
    ],
    "commands": [
      {
        "title": "Format Selection (BigQuery SQL)",
        "shortTitle": "Format BQ-SQL",
        "command": "bq-formatter.format-selection"
      }
    ],
    "configuration": {
      "title": "Bigquery Formatter",
      "properties": {
        "bq-formatter.language": {
          "type": "string",
          "enum": [
            "sql",
            "bigquery",
            "db2",
            "hive",
            "mariadb",
            "mysql",
            "n1ql",
            "plsql",
            "postgresql",
            "redshift",
            "spark",
            "sqlite",
            "tsql"
          ],
          "default": "bigquery",
          "markdownDescription": "Formats `sql` files in another SQL Flavour when no VSCode Language exists."
        },
        "bq-formatter.tabWidth": {
          "type": "number",
          "default": 2,
          "minimum": 1,
          "markdownDescription": "bq-formatter.tabWidth gets preference over editor.tabSize if specified."
        },
        "bq-formatter.useTabs": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "If not specified, !editor.insertSpaces is used in its place."
        },
        "bq-formatter.keywordCase": {
          "type": "string",
          "enum": [
            "preserve",
            "upper",
            "lower"
          ],
          "default": "upper",
          "markdownDescription": "Whether to print keywords in UPPERCASE, lowercase, or preserve existing."
        },
        "bq-formatter.indentStyle": {
          "type": "string",
          "enum": [
            "standard",
            "tabularLeft",
            "tabularRight"
          ],
          "enumDescriptions": [
            "Standard SQL format, with cascading indents",
            "Maintain space column between keyword and args, aligning keywords to left",
            "Maintain space column between keyword and args, aligning keywords to right"
          ],
          "default": "standard",
          "markdownDescription": "Where to place keywords"
        },
        "bq-formatter.logicalOperatorNewline": {
          "type": "string",
          "enum": [
            "before",
            "after"
          ],
          "default": "before",
          "markdownDescription": "Whether to break before or after logical operators (AND, OR, etc.)"
        },
        "bq-formatter.aliasAs": {
          "type": "string",
          "enum": [
            "preserve",
            "always",
            "select",
            "never"
          ],
          "enumDescriptions": [
            "Preserve existing AS usage",
            "Use AS in SELECT clauses and for tables",
            "Use AS only in SELECT clauses",
            "Do not use AS for aliases"
          ],
          "default": "always",
          "markdownDescription": "Where to use AS in column or table aliases."
        },
        "bq-formatter.tabulateAlias": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Whether to right-align aliases to the longest line in the SELECT clause."
        },
        "bq-formatter.commaPosition": {
          "type": "string",
          "enum": [
            "before",
            "after",
            "tabular"
          ],
          "enumDescriptions": [
            "Comma preceding each column",
            "Comma following each column",
            "Comma right-aligned to longest column line"
          ],
          "default": "after",
          "markdownDescription": "Where to place commas for SELECT and GROUP BY clauses."
        },
        "bq-formatter.expressionWidth": {
          "type": "integer",
          "default": 50,
          "minimum": 0,
          "markdownDescription": "Number of characters allowed in each line before breaking."
        },
        "bq-formatter.linesBetweenQueries": {
          "type": "integer",
          "default": 2,
          "minimum": 0,
          "markdownDescription": "How many newlines to place between each query / statement."
        },
        "bq-formatter.denseOperators": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Strip whitespace around operators such as + or >=."
        },
        "bq-formatter.newlineBeforeSemicolon": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Whether to place semicolon on its own line or on previous line."
        },
        "bq-formatter.insertFinalNewline": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Whether to insert a final newline at the end of the file or not."
        }
      }
    }
  }
}
